{"version":3,"sources":["playSound.js","constants.jsx","components/Key/index.jsx","hooks.js","components/OctaveControl/index.jsx","Synth.js","serviceWorker.js","index.js"],"names":["context","AudioContext","playSound","frequency","type","o","createOscillator","g","createGain","connect","value","destination","start","gain","exponentialRampToValueAtTime","currentTime","keysToNotes","split","soundTypes","octave","notes","blackKeys","Key","_ref","keyboardCode","index","scale","isBlack","indexOf","hook","targetKey","_useState3","useState","_useState4","Object","slicedToArray","pressed","setPressed","onKeyDown","key","onKeyUp","_ref2","useEffect","window","addEventListener","removeEventListener","useKey","Math","pow","react_default","a","createElement","className","classnames","Black","Pressed","onClick","OctaveControl","setScale","SoundType","active","ActiveType","Synth","_useKeysPress","_useState5","_useState6","setKey","_useState7","Set","_useState8","keysPressed","setKeyPressed","e","add","delete","useKeysPress","_React$useState","React","_React$useState2","setType","_React$useState3","_React$useState4","components_OctaveControl","map","t","Synth_SoundType","components_Key","role","href","Boolean","location","hostname","match","ReactDOM","render","src_Synth_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d908a885.chunk.js","sourcesContent":["const context = new AudioContext();\n\nexport default (frequency, type) => {\n    const o = context.createOscillator();\n    let g = context.createGain();\n\n    o.type = type;\n    o.connect(g);\n    o.frequency.value = frequency;\n    g.connect(context.destination);\n    o.start(0);\n    g.gain.exponentialRampToValueAtTime(0.00001, context.currentTime + 2);\n};\n","export const keysToNotes = 'awsedftgyhujk'.split('');\nexport const soundTypes = ['sine', 'square', 'triangle', 'sawtooth'];\n\nexport const octave = [\n    261.6,\n    277.2,\n    293.7,\n    311.1,\n    329.6,\n    349.2,\n    370.0,\n    392.0,\n    415.3,\n    440.0,\n    466.2,\n    493.9,\n    523.3\n];\n\nexport const notes = [\n    'C',\n    'C#',\n    'D',\n    'Eb',\n    'E',\n    'F',\n    'F#',\n    'G',\n    'G#',\n    'A',\n    'Bb',\n    'B',\n    'C'\n];\n","import React, { useEffect } from 'react';\nimport classnames from 'classnames';\n\nimport playSound from '../../playSound';\nimport { useKey } from '../../hooks';\nimport { notes, octave } from '../../constants';\n\nconst blackKeys = 'wetyu'.split('');\n\nconst Key = ({ keyboardCode, index, scale, type }) => {\n    const isBlack = blackKeys.indexOf(keyboardCode) >= 0;\n\n    const hook = useKey(keyboardCode);\n    useEffect(() => {\n        if (hook) playSound(octave[index] * 2 ** scale, type);\n    }, [hook, index, scale, type]);\n    return (\n        <div\n            className={classnames('Button', {\n                Black: isBlack,\n                Pressed: hook\n            })}\n            onClick={() => playSound(octave[index] * 2 ** scale, type)}\n        >\n            {notes[index]}\n        </div>\n    );\n};\n\nexport default Key;\n","import { useState, useEffect } from 'react';\n\nexport const useSequence = () => {\n    const [sequence, setSequence] = useState(new Set([]));\n\n    const toggleSequence = (index, value) => {\n        if (value) {\n            setSequence(sequence.add(index));\n        } else {\n            sequence.delete(index);\n            setSequence(sequence);\n        }\n    };\n    return [sequence, toggleSequence];\n};\n\nexport const useKey = targetKey => {\n    const [pressed, setPressed] = useState(false);\n    const onKeyDown = ({ key }) => {\n        if (targetKey === key) setPressed(true);\n    };\n    const onKeyUp = ({ key }) => {\n        if (targetKey === key) setPressed(false);\n    };\n    useEffect(() => {\n        window.addEventListener('keydown', onKeyDown);\n        window.addEventListener('keyup', onKeyUp);\n\n        return () => {\n            window.removeEventListener('keydown', onKeyDown);\n            window.removeEventListener('keyup', onKeyUp);\n        };\n    }, []);\n    return pressed;\n};\n\nexport const useKeysPress = () => {\n    const [key, setKey] = useState();\n    const [keysPressed, setKeyPressed] = useState(new Set([]));\n    const onKeyDown = e => {\n        setKey(e.key);\n        setKeyPressed(keysPressed.add(e.key));\n    };\n    const onKeyUp = e => {\n        setKey(null);\n        keysPressed.delete(e.key);\n        setKeyPressed(keysPressed);\n    };\n    useEffect(() => {\n        window.addEventListener('keydown', onKeyDown);\n        window.addEventListener('keyup', onKeyUp);\n\n        return () => {\n            window.removeEventListener('keydown', onKeyDown);\n            window.removeEventListener('keyup', onKeyUp);\n        };\n    }, []);\n    return [key, keysPressed];\n};\n","import React from 'react';\n\nconst OctaveControl = ({ scale, setScale }) => {\n    return (\n        <div>\n            <span className=\"OctaveControl\" onClick={() => setScale(scale - 1)}>\n                -\n            </span>\n            <span className=\"OctaveControl\">{scale}</span>\n            <span className=\"OctaveControl\" onClick={() => setScale(scale + 1)}>\n                +\n            </span>\n        </div>\n    );\n};\n\nexport default OctaveControl;\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport Key from './components/Key';\nimport OctaveControl from './components/OctaveControl';\n\nimport { soundTypes, keysToNotes } from './constants';\nimport { useKeysPress } from './hooks';\n\nimport './Synth.sass';\n\nconst SoundType = ({ type, active, onClick }) => (\n    <div\n        className={classnames('SoundType', { ActiveType: type === active })}\n        onClick={() => onClick(type)}\n    >\n        {type}\n    </div>\n);\n\nconst Synth = () => {\n    const [key] = useKeysPress();\n    const [type, setType] = React.useState('sine');\n    const [scale, setScale] = React.useState(0);\n\n    React.useEffect(() => {\n        if ('1234'.indexOf(key) >= 0) {\n            setType(soundTypes['1234'.indexOf(key)]);\n        } else if (key === '-') {\n            setScale(scale - 1);\n        } else if (key === '=') {\n            setScale(scale + 1);\n        }\n    }, [key]);\n\n    return (\n        <div className=\"Container\">\n            <h1>react-synth</h1>\n            <OctaveControl scale={scale} setScale={setScale} />\n            <div>\n                {soundTypes.map(t => (\n                    <SoundType type={t} active={type} onClick={setType} />\n                ))}\n            </div>\n            <div>\n                {keysToNotes.map((key, index) => (\n                    <Key\n                        keyboardCode={key}\n                        index={index}\n                        scale={scale}\n                        type={type}\n                    />\n                ))}\n            </div>\n            <footer>\n                crafted with <span role=\"img\">❤️</span> by{' '}\n                <a href=\"http://borzeckid.com\">borzecki</a>\n            </footer>\n        </div>\n    );\n};\n\nexport default Synth;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Synth from './Synth';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Synth />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}